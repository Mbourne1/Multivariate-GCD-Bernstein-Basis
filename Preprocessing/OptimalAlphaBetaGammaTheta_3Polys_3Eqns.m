function [alpha, beta, gamma, th1, th2] = ...
    OptimalAlphaBetaGammaTheta_3Polys_3Eqns( ...
    max_matrix_fxy1, min_matrix_fxy1, ...
    max_matrix_fxy2, min_matrix_fxy2, ...
    max_matrix_gxy1, min_matrix_gxy1, ...
    max_matrix_gxy2, min_matrix_gxy2, ...
    max_matrix_hxy1, min_matrix_hxy1,...
    max_matrix_hxy2, min_matrix_hxy2)
% OptimalAlphaTheta(max_mtrx_f,min_mtrx_f, max_mtrx_g,min_mtrx_g)
%
% Obtain the optimal value of alpha, \theta_{1} and \theta_{2} in
% preprocessing the Sylvester matrix
% S_{k_{1},k_{2}}(f,g)
%
% Inputs.
%
% max_mtrx_f : (Matrix) containing entries of maximum magnitude of each
% coefficient of f(x,y) in the Sylvester matrix S_{k1,k2}
%
% min_mtrx_f : (Matrix) containing entries of maximum magnitude of each
% coefficient of f(x,y) in the Sylvester matrix S_{k1,k2}
%
% max_matrix_fxy2 : (Matrix)
%
% min_matrix_fxy2 : (Matrix)
%
% max_mtrx_g : (Matrix) containing entries of maximum magnitude of each
% coefficient of g(x,y) in the Sylvester matrix S_{k1,k2}
%
% min_mtrx_g : (Matrix) containing entries of maximum magnitude of each
% coefficient of g(x,y) in the Sylvester matrix S_{k1,k2}
%
% max_matrix_hxy : (Matrix)
%
% min_matrix_hxy : (Matrix)
%
%
% Outputs
%
% alpha : (Float) Optimal value \alpha such that the two partitions of
% S_{k_{1},k_{2}} are balanced.
%
% beta : (Float)
%
% gamma : (Float)
%
% th1 : (Float) Optimal value of \theta_{1}
%
% th2 : (Float) Optimal value of \theta_{2}



% Get the degree of polynomial f(x,y)
[m1, m2] = GetDegree_Bivariate(max_matrix_fxy1);
[n1, n2] = GetDegree_Bivariate(max_matrix_gxy1);
[o1, o2] = GetDegree_Bivariate(max_matrix_hxy1);

% Assemble the four submatrices of Matrix A
nCoefficients_fxy = (m1 + 1) * (m2 + 1);
nCoefficients_gxy = (n1 + 1) * (n2 + 1);
nCoefficients_hxy = (o1 + 1) * (o2 + 1);

v_i1_f = GetAsVector(diag(0 : 1 : m1) * ones(m1 + 1, m2 + 1));
v_i2_f = GetAsVector(ones(m1 + 1, m2 + 1) * diag(0 : 1 : m2));

v_i1_g = GetAsVector(diag(0 : 1 : n1) * ones(n1 + 1, n2 + 1));
v_i2_g = GetAsVector(ones(n1 + 1, n2 + 1) * diag(0 : 1 : n2));

v_i1_h = GetAsVector(diag(0 : 1 : o1) * ones(o1 + 1, o2 + 1));
v_i2_h = GetAsVector(ones(o1 + 1, o2 + 1) * diag(0 : 1 : o2));


method = 'alpha_gamma';

switch method
    
    case 'alpha_beta_gamma'
        
        % Define vector f
        f = [1 -1 0 0 0 0 0];
        
        A1 = ...
            [
            ones(nCoefficients_fxy, 1) ...
            zeros(nCoefficients_fxy, 1) ...
            -1 .* v_i1_f ...
            -1 .* v_i2_f ...
            -ones(nCoefficients_fxy, 1) ...
            zeros(nCoefficients_fxy, 1) ...
            zeros(nCoefficients_fxy, 1)
            ];
        
        A2 = ...
            [
            ones(nCoefficients_gxy, 1) ...
            zeros(nCoefficients_gxy, 1) ...
            -1.* v_i1_g ...
            -1.* v_i2_g ...
            zeros(nCoefficients_gxy,1)...
            -1.* ones(nCoefficients_gxy, 1) ...
            zeros(nCoefficients_gxy,1)
            ];
        
        A3 = ...
            [
            ones(nCoefficients_fxy, 1) ...
            zeros(nCoefficients_fxy, 1) ...
            -1.* v_i1_f ...
            -1.* v_i2_f ...
            zeros(nCoefficients_fxy, 1)...
            zeros(nCoefficients_fxy, 1) ...
            -1.* ones(nCoefficients_fxy, 1)
            ];
        
        A4 = ...
            [
            ones(nCoefficients_hxy, 1) ...
            zeros(nCoefficients_hxy, 1) ...
            -1.* v_i1_h ...
            -1.* v_i2_h ...
            zeros(nCoefficients_hxy,1)...
            -1.* ones(nCoefficients_hxy, 1) ...
            zeros(nCoefficients_hxy, 1)
            ];
        
        A5 = ...
            [
             ones(nCoefficients_hxy, 1) ...
            zeros(nCoefficients_hxy, 1) ...
            -1.* v_i1_h ...
            -1.* v_i2_h ...
            zeros(nCoefficients_hxy,1)...
            -1.* ones(nCoefficients_hxy, 1) ...
            zeros(nCoefficients_hxy, 1)
            ];
        
        A6 = ...
            [
            ones(nCoefficients_gxy, 1) ...
            zeros(nCoefficients_gxy, 1) ...
            -1.* v_i1_g ...
            -1.* v_i2_g ...
            zeros(nCoefficients_gxy,1)...
            -1.* ones(nCoefficients_gxy, 1) ...
            zeros(nCoefficients_gxy,1)
            ];
        
        a1 = ...
            [
            zeros(nCoefficients_fxy, 1) ...
            -ones(nCoefficients_fxy, 1) ...
            v_i1_f ...
            v_i2_f ...
            ones(nCoefficients_fxy, 1) ...
            zeros(nCoefficients_fxy, 1) ...
            zeros(nCoefficients_fxy, 1) ...
            ];
        
        a2 = ...
            [
            zeros(nCoefficients_gxy,1) ...
            -ones(nCoefficients_gxy,1) ...
            v_i1_g ...
            v_i2_g ...
            zeros(nCoefficients_gxy,1) ...
            ones(nCoefficients_gxy,1) ...
            zeros(nCoefficients_gxy,1)
            ];
        
        a3 = ...
            [
            zeros(nCoefficients_fxy, 1) ...
            -ones(nCoefficients_fxy, 1) ...
            1.* v_i1_f ...
            1.* v_i2_f ...
            zeros(nCoefficients_fxy, 1)...
            zeros(nCoefficients_fxy, 1) ...
            ones(nCoefficients_fxy, 1)
            ];
        
        a4 = ...
            [
            zeros(nCoefficients_hxy, 1) ...
            -ones(nCoefficients_hxy, 1) ...
            1.* v_i1_h ...
            1.* v_i2_h ...
            zeros(nCoefficients_hxy,1)...
            1.* ones(nCoefficients_hxy, 1) ...
            zeros(nCoefficients_hxy, 1)
            ];
        
        a5 = ...
            [
            zeros(nCoefficients_hxy, 1) ...
            -ones(nCoefficients_hxy, 1) ...
            1.* v_i1_h ...
            1.* v_i2_h ...
            zeros(nCoefficients_hxy,1)...
            1.* ones(nCoefficients_hxy, 1) ...
            zeros(nCoefficients_hxy, 1)
            ];
        
        a6 = ...
            [
            zeros(nCoefficients_gxy,1) ...
            -ones(nCoefficients_gxy,1) ...
            v_i1_g ...
            v_i2_g ...
            zeros(nCoefficients_gxy,1) ...
            ones(nCoefficients_gxy,1) ...
            zeros(nCoefficients_gxy,1)
            ];
        
    case 'alpha_beta'
        % Define vector f
        f = [1 -1 0 0 0 0];
        
        error('Not Complete')
        
    case 'alpha_gamma'
        
        % Define vector f
        f = [1 -1 0 0 0 0];
        
        A1 = ...
            [
            ones(nCoefficients_fxy, 1) ...
            zeros(nCoefficients_fxy, 1) ...
            -1 .* v_i1_f ...
            -1 .* v_i2_f ...
            -ones(nCoefficients_fxy, 1) ...
            zeros(nCoefficients_fxy, 1)
            ];
        
        A2 = ...
            [
            ones(nCoefficients_gxy, 1) ...
            zeros(nCoefficients_gxy, 1) ...
            -1.* v_i1_g ...
            -1.* v_i2_g ...
            zeros(nCoefficients_gxy,1)...
            zeros(nCoefficients_gxy,1)
            ];
        
        A3 = ...
            [
            ones(nCoefficients_fxy, 1) ...
            zeros(nCoefficients_fxy, 1) ...
            -1.* v_i1_f ...
            -1.* v_i2_f ...
            zeros(nCoefficients_fxy, 1)...
            -1.* ones(nCoefficients_fxy, 1)
            ];
        
        A4 = ...
            [
            ones(nCoefficients_hxy, 1) ...
            zeros(nCoefficients_hxy, 1) ...
            -1.* v_i1_h ...
            -1.* v_i2_h ...
            zeros(nCoefficients_hxy,1)...
            zeros(nCoefficients_hxy, 1)
            ];
        
        
        A5 = ...
            [
            ones(nCoefficients_hxy, 1) ...
            zeros(nCoefficients_hxy, 1) ...
            -1.* v_i1_h ...
            -1.* v_i2_h ...
            zeros(nCoefficients_hxy,1)...
            zeros(nCoefficients_hxy, 1)
            ];
        
        A6 = ...
            [
            ones(nCoefficients_gxy, 1) ...
            zeros(nCoefficients_gxy, 1) ...
            -1.* v_i1_g ...
            -1.* v_i2_g ...
            zeros(nCoefficients_gxy,1)...
            zeros(nCoefficients_gxy,1)
            ];
        
        a1 = ...
            [
            zeros(nCoefficients_fxy, 1) ...
            -ones(nCoefficients_fxy, 1) ...
            v_i1_f ...
            v_i2_f ...
            ones(nCoefficients_fxy, 1) ...
            zeros(nCoefficients_fxy, 1) ...
            ];
        
        a2 = ...
            [
            zeros(nCoefficients_gxy,1) ...
            -ones(nCoefficients_gxy,1) ...
            v_i1_g ...
            v_i2_g ...
            zeros(nCoefficients_gxy,1) ...
            zeros(nCoefficients_gxy,1)
            ];
        
        a3 = ...
            [
            zeros(nCoefficients_fxy, 1) ...
            -ones(nCoefficients_fxy, 1) ...
            1.* v_i1_f ...
            1.* v_i2_f ...
            zeros(nCoefficients_fxy, 1)...
            ones(nCoefficients_fxy, 1)
            ];
        
        a4 = ...
            [
            zeros(nCoefficients_hxy, 1) ...
            -ones(nCoefficients_hxy, 1) ...
            1.* v_i1_h ...
            1.* v_i2_h ...
            zeros(nCoefficients_hxy,1)...
            zeros(nCoefficients_hxy, 1)
            ];
        
        a5 = ...
            [
            zeros(nCoefficients_hxy, 1) ...
            -ones(nCoefficients_hxy, 1) ...
            1.* v_i1_h ...
            1.* v_i2_h ...
            zeros(nCoefficients_hxy,1)...
            zeros(nCoefficients_hxy, 1)
            ];
        
        a6 = ...
            [
            zeros(nCoefficients_gxy,1) ...
            -ones(nCoefficients_gxy,1) ...
            v_i1_g ...
            v_i2_g ...
            zeros(nCoefficients_gxy,1) ...
            zeros(nCoefficients_gxy,1)
            ];
            
    
    
    case 'beta_gamma'
        % Define vector f
        f = [1 -1 0 0 0 0];
        
        error 'not complete'
end

% Now build the vector b
B1 = GetAsVector(abs(max_matrix_fxy1));
B2 = GetAsVector(abs(max_matrix_gxy1));
B3 = GetAsVector(abs(max_matrix_fxy2));
B4 = GetAsVector(abs(max_matrix_hxy1));
B5 = GetAsVector(abs(max_matrix_hxy2));
B6 = GetAsVector(abs(max_matrix_gxy2));

b1 = GetAsVector(abs(min_matrix_fxy1));
b2 = GetAsVector(abs(min_matrix_gxy1));
b3 = GetAsVector(abs(min_matrix_fxy2));
b4 = GetAsVector(abs(min_matrix_hxy1));
b5 = GetAsVector(abs(min_matrix_hxy2));
b6 = GetAsVector(abs(min_matrix_gxy2));

[A1, B1] = RemoveZeros(A1, B1);
[A2, B2] = RemoveZeros(A2, B2);
[A3, B3] = RemoveZeros(A3, B3);
[A4, B4] = RemoveZeros(A4, B4);
[A5, B5] = RemoveZeros(A5, B5);
[A6, B6] = RemoveZeros(A6, B6);
[a1, b1] = RemoveZeros(a1, b1);
[a2, b2] = RemoveZeros(a2, b2);
[a3, b3] = RemoveZeros(a3, b3);
[a4, b4] = RemoveZeros(a4, b4);
[a5, b5] = RemoveZeros(a5, b5);
[a6, b6] = RemoveZeros(a6, b6);




b = [log10(B1);
    log10(B2);
    log10(B3);
    log10(B4);
    log10(B5);
    log10(B6);
    -log10(b1);
    -log10(b2);
    -log10(b3);
    -log10(b4);
    -log10(b5);
    -log10(b6)];

A = [A1; A2; A3; A4; A5; A6; a1; a2; a3; a4; a5; a6];

warning('off')
x = linprog(f,-A,-b);
warning('on')

try
    switch method
        case 'alpha_beta_gamma'
            th1 = 10^x(3);
            th2 = 10^x(4);
            alpha  = 10^x(5);
            beta = 10^x(6);
            gamma = 10^x(7);
            
            
        case 'alpha_gamma'
            th1 = 10^x(3);
            th2 = 10^x(4);
            alpha  = 10^x(5);
            beta = 1;
            gamma = 10^x(6);
            
        otherwise
            error('Error')
    end
    
catch
    alpha = 1;
    beta = 1;
    gamma = 1;
    th1 = 1;
    th2 = 1;
end

end


function [A1, B1] = RemoveZeros(A1, B1)

% % Find any zeros in the lambda vector
indeces = find(B1 == 0);
A1(indeces,:) = [];
B1(indeces,:) = [];


end